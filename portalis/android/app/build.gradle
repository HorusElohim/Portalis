plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.example.portalis"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.portalis"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}

// Build Rust shared libraries and place them in jniLibs before Android build.
def rustBuildScript = new File(rootProject.projectDir, "build_rust_android.sh")

tasks.register("buildRustAndroidRelease", Exec) {
    workingDir rootProject.projectDir
    commandLine "bash", rustBuildScript.absolutePath, "release"
}

tasks.register("buildRustAndroidDebug", Exec) {
    workingDir rootProject.projectDir
    commandLine "bash", rustBuildScript.absolutePath, "debug"
}

afterEvaluate {
    // Hook into variant preBuild so Rust libs exist before packaging.
    android.applicationVariants.all { variant ->
        def cap = variant.name.capitalize()
        if (variant.buildType.name == "release") {
            tasks.named("pre${cap}Build").configure { dependsOn(tasks.named("buildRustAndroidRelease")) }
        } else {
            tasks.named("pre${cap}Build").configure { dependsOn(tasks.named("buildRustAndroidDebug")) }
        }
    }
}
